// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String                 @id @default(auto()) @map("_id") @db.ObjectId
  name           String                 @unique
  hashedPassword String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  folders        Folder[]
  files          File[]
  configuration DefaultConfiguration?
  configurationId String? @db.ObjectId
}

model Folder {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  index        Int
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // for mongoDb
  subFolderIds String[] @db.ObjectId @default([])
  // Relations to folder/file
  files        File[]   @relation("FolderFiles")
  subFolders   Folder[] @relation("FolderSubfolders")
  parentFolder Folder?  @relation("FolderSubfolders", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId     String?  @db.ObjectId
  parentName String?
  // relation to user
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId

  @@unique([userId, name, parentId])
  @@unique([userId, name, index])
}

model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  index     Int
  name      String
  elements Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relation
  folder    Folder?  @relation("FolderFiles", fields: [folderId], references: [id])
  folderId  String?  @db.ObjectId
  folderName String?
  folderIndex Int?
  // relations to user
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId

  @@unique([userId, name, index])
}

model DefaultConfiguration {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  elementStyles Json?
  user          User     @relation(fields: [userId], references: [id])

  @@map("defaultConfigurations")
}
