// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String   @unique
  hashedPassword String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  folders        Folder[]
  files          File[]

  // configuration
  sharedConfigurations SharedConfiguration[]
  configuration        DefaultConfiguration?  @relation("ActiveConfiguration", fields: [configurationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  configurationId      String?                @unique @db.ObjectId
  configurationSet     ConfigurationSet?      @relation("UserConfigSet")
  configurations       DefaultConfiguration[] @relation("UserConfigurations")
}

model DefaultConfiguration {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  userId        String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  elementStyles Json?

  // relation to SetConfiguration
  configSet   ConfigurationSet? @relation("SetConfigurations", fields: [configSetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  configSetId String?           @db.ObjectId

  // relation to user 
  user          User                 @relation("UserConfigurations", fields: [userId], references: [id])
  activeForUser User?                @relation("ActiveConfiguration")
  shared        SharedConfiguration?

  @@map("defaultConfigurations")
}

model ConfigurationSet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  user   User   @relation("UserConfigSet", fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  configurations DefaultConfiguration[] @relation("SetConfigurations")
}

model Folder {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  index     Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // array for mongoDb
  subFolderIds String[] @default([]) @db.ObjectId
  fileIds      String[] @default([]) @db.ObjectId

  // Relations to folder/file
  files        File[]   @relation("FolderFiles")
  subFolders   Folder[] @relation("FolderSubfolders")
  parentFolder Folder?  @relation("FolderSubfolders", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId     String?  @db.ObjectId
  parentName   String?

  // relation to user
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@unique([userId, name, parentId])
  @@unique([userId, name, index])
}

model File {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  index         Int
  name          String
  rootBg        String?
  rootFont      String?
  rootFontColor String?
  elements      Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // relation
  folder        Folder?  @relation("FolderFiles", fields: [folderId], references: [id])
  folderId      String?  @db.ObjectId
  folderName    String?
  folderIndex   Int?
  // relations to user
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId

  @@unique([userId, name, index])
}

model SharedConfiguration {
  id                    String               @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  description           String?
  thumbnailUrl          String?
  downloads             Int                  @default(0)
  rating                Float                @default(0)
  numberOfRatings       Int                  @default(0)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  elementStyles         Json?
  // Relations
  originalConfiguration DefaultConfiguration @relation(fields: [configurationId], references: [id])
  configurationId       String               @unique @db.ObjectId
  author                User                 @relation(fields: [authorId], references: [id])
  authorId              String               @db.ObjectId
  // extensions ?
  tags                  String[]
  // comments             Comment[]
  // likes                Like[]

  @@map("sharedConfigurations")
}

// model Comment {
//   id                    String               @id @default(auto()) @map("_id") @db.ObjectId
//   content              String
//   createdAt            DateTime              @default(now())
//   configuration        SharedConfiguration   @relation(fields: [configurationId], references: [id])
//   configurationId      String                @db.ObjectId
//   author               User                  @relation(fields: [authorId], references: [id])
//   authorId             String                @db.ObjectId
// }

// model Like {
//   id                    String               @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt            DateTime              @default(now())
//   configuration        SharedConfiguration   @relation(fields: [configurationId], references: [id])
//   configurationId      String                @db.ObjectId
//   user                 User                  @relation(fields: [userId], references: [id])
//   userId               String                @db.ObjectId

//   @@unique([configurationId, userId])
// }
